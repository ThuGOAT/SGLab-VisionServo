# -*- coding: utf-8 -*-
# from goniometer import biometrics_library, axis, OLI
import pandas as pd
import ctypes
import time
import tkinter as tk 
from tkinter import Frame
import tkinter.font as font
from tkinter.constants import LEFT
# import matplotlib
# from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
# from matpotlib.figure import Figure
# from matplotlib.animation import FuncAnimation
import serial
import threading
import numpy as np
import socket
from collections import deque
#滚轮正转
def middle_p():
    data=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x24,0x01,0x04,0x00,0x50,0x5D]
    ser.write(data)
#滚轮反转
def middle_n():
    data=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x24,0x00,0x04,0x00,0x4f,0x5D]
    ser.write(data)
#左键单击
def index_1():
    data=[0x5A,0x06,0x20,0x00,0x01,0x60,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x89,0x5D]
    ser.write(data)
    time.sleep(0.5)
    data1=[0x5A,0x06,0x20,0x00,0x01,0x60,0x06,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x5D]
    ser.write(data1)
#左键双击
def index_2():
    data=[0x5A,0x06,0x20,0x00,0x01,0x50,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x5D]
    data1=[0x5A,0x06,0x20,0x00,0x01,0x50,0x06,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x5D]
    data2=[0x5A,0x06,0x20,0x00,0x01,0x50,0x05,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x5D]
    ser.write(data)
    time.sleep(0.45)
    ser.write(data2)
    time.sleep(0.15)
    ser.write(data)
    time.sleep(0.25)
    ser.write(data1)
#左键长按,t秒后释放
def index_3(t):
    data=[0x5A,0x06,0x20,0x00,0x01,0x30,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0x5D]
    ser.write(data)
    time.sleep(t)
    data1=[0x5A,0x06,0x20,0x00,0x01,0x30,0x06,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c,0x5D]
    ser.write(data1)
#右键单击
def ring_1():
    data=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x30,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0x5D]
    ser.write(data)
    time.sleep(0.5)
    data1=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x30,0x06,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c,0x5D]
    ser.write(data1)
#中键单击
def middle_1():
    data=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x30,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0x5D]
    ser.write(data)
    time.sleep(0.5)
    data1=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x30,0x06,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c,0x5D]
    ser.write(data1)

#夹爪闭合
def bellow_close():
    data=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x44,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6e,0x5D]
    for _ in range(55):  # 重复35次
        ser.write(data)
        time.sleep(0.2)  
#夹爪张开
def bellow_open():
    data=[0x5A,0x06,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x44,0x01,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6f,0x5D]
    for _ in range(55):  # 重复35次
        ser.write(data)
        time.sleep(0.2)  


##串口通信
port='COM3'
bps=1000000 
ser = serial.Serial(port, bps, timeout=1)
i = 0
try:    
    if (ser.isOpen() == True):
        print("串口已经打开！")
       
except Exception as exc:
    print("串口打开异常:", exc)




if __name__ == "__main__":
    # middle_n()##滚轮
    # middle_p()##滚轮
    # index_1()
    # ring_1()
    # middle_1()
    bellow_open()
    # bellow_close()

    # print(ser.readline().decode('utf-8').strip())
    ser.close()


